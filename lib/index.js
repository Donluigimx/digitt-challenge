const EventEmitter = require('events')

class Account extends EventEmitter {
  constructor(transactions, prepareValues = true) {
    super(...arguments)

    this.transactions = transactions
    this.balance = 0
    this.prepareValues = prepareValues
    this.calculateBalance()

    this.on('calculateBalance', this.calculateBalance)
  }
  
  calculateBalance() {
    let balance = 0
    let principal = 0
    let iva
    let interests

    this.transactions.forEach(transaction => {

      // Prepare values to be cents
      if (this.prepareValues) {
        transaction.value = Account.unitToCents(transaction.value)
        transaction.time = new Date(transaction.time)
      }

      // If a value is assigned either to iva or interest, will override old values
      if (iva && transaction.type === 'iva') {
        transaction.value = iva
      } else if (interests && transaction.type === 'interests') {
        transaction.value = interests
      }

      switch (transaction.operation) {
        case 'set':
          principal += transaction.value
          balance += transaction.value
          transaction.balance = balance
          break
        case 'add':
          balance += transaction.value
          transaction.balance = balance
          break
        case 'decrease':
          principal -= transaction.value
          balance -= transaction.value
          transaction.balance = balance

          interests = Math.floor(principal * Account.INTERESTS)
          iva = Math.floor(interests * Account.IVA)

          break
        default:
          console.error({ msg: 'Unhandled error'})
      }
    })

    if (this.prepareValues) this.prepareValues = false

    this.balance = balance
    this.principal = principal
  }

  getBalance(date) {
    if (!date)
      return Account.centsToUnit(this.balance)

    const index = this.transactions.findIndex(transaction => transaction.time > date)

    if (index === 0) return 0
    if (index < 0) return Account.centsToUnit(this.balance)
    
    return Account.centsToUnit(this.transactions[index - 1].balance)
  }

  receivePayment(units, date) {
    const index = this.transactions.findIndex(transaction => transaction.time > date)
    const transactionBody = {
      type: 'principal',
      operation: 'decrease',
      time: date,
      value: Account.unitToCents(units)
    }
    
    if (index < 0) this.transactions.push(transactionBody)
    else if (index > 0) this.transactions.splice(index, 0, transactionBody)
    else return console.error('Unhandled error') //TODO: this should throw a custom Error

    this.emit('calculateBalance')
  }
}

Account.unitToCents = value => Math.floor(value * 100)
Account.centsToUnit = value => value / 100

Account.INTERESTS = (28/360) / 100 // Loans generate a daily interest generated by dividing the 28% APR / 360 days
Account.IVA = 16 / 100 // These daily interests also generats Taxes (IVA) at a 16% rate.

exports.Account = Account

